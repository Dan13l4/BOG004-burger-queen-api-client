<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 084ab4c2cff1d6c77666609f5f2d3443c1239351
>>>>>>> d177c941d932e6db29c7c5ba41f5a20d633676af
import { Patch, PatchListener, Immer } from "../internal";
/** Each scope represents a `produce` call. */
export interface ImmerScope {
    patches_?: Patch[];
    inversePatches_?: Patch[];
    canAutoFreeze_: boolean;
    drafts_: any[];
    parent_?: ImmerScope;
    patchListener_?: PatchListener;
    immer_: Immer;
    unfinalizedDrafts_: number;
}
export declare function getCurrentScope(): ImmerScope;
export declare function usePatchesInScope(scope: ImmerScope, patchListener?: PatchListener): void;
export declare function revokeScope(scope: ImmerScope): void;
export declare function leaveScope(scope: ImmerScope): void;
export declare function enterScope(immer: Immer): ImmerScope;
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
=======
=======
=======
>>>>>>> 08bbc92f8b5e1b3f692406d6a346958aada0c6d2
>>>>>>> d177c941d932e6db29c7c5ba41f5a20d633676af
import { Patch, PatchListener, Immer } from "../internal";
/** Each scope represents a `produce` call. */
export interface ImmerScope {
    patches_?: Patch[];
    inversePatches_?: Patch[];
    canAutoFreeze_: boolean;
    drafts_: any[];
    parent_?: ImmerScope;
    patchListener_?: PatchListener;
    immer_: Immer;
    unfinalizedDrafts_: number;
}
export declare function getCurrentScope(): ImmerScope;
export declare function usePatchesInScope(scope: ImmerScope, patchListener?: PatchListener): void;
export declare function revokeScope(scope: ImmerScope): void;
export declare function leaveScope(scope: ImmerScope): void;
export declare function enterScope(immer: Immer): ImmerScope;
<<<<<<< HEAD
>>>>>>> 3eaa855b (haciendo npm install)
=======
<<<<<<< HEAD
>>>>>>> 3eaa855b (haciendo npm install)
=======
>>>>>>> 08bbc92f8b5e1b3f692406d6a346958aada0c6d2
>>>>>>> 084ab4c2cff1d6c77666609f5f2d3443c1239351
>>>>>>> d177c941d932e6db29c7c5ba41f5a20d633676af
//# sourceMappingURL=scope.d.ts.map